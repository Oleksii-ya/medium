import React, { useEffect, useState, useContext } from 'react'
import ArticleForm from 'components/articleForm'
import useFetch from 'hooks/useFetch'
import { useParams, Navigate } from 'react-router-dom';
import Loading from 'components/loading'
import { CurrentUserContext } from 'contexts/currentUser'

function EditArticle() {
  const slug = useParams().slug;
  const [currentUserState] = useContext(CurrentUserContext)
  const apiUrl = `articles/${slug}`
  const [{ response: fetchArticleResponse }, doFetchArticle] = useFetch(apiUrl)
  const [{ response: updateArticleResponse, error: updateArticlError }, doUpdateArticle] = useFetch(apiUrl)
  const [initialValues, setInitialValues] = useState(null)
  const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false)

  const handleSubmit = article => {
    doUpdateArticle({
      method: 'put',
      data: {
        article
      }
    })
  }

  useEffect(() => {
    doFetchArticle()
  }, [])

  useEffect(() => {
    if (!fetchArticleResponse) {
      return
    }
    setInitialValues({
      title: fetchArticleResponse.article.title,
      description: fetchArticleResponse.article.description,
      body: fetchArticleResponse.article.body,
      tagList: fetchArticleResponse.article.tagList
    })
  }, [fetchArticleResponse])

  useEffect(() => {
    if (!updateArticleResponse) {
      return
    }
    setIsSuccessfullSubmit(true)
  }, [updateArticleResponse])

  if (currentUserState.isLoggedIn === false) {
    return <Navigate to="/" />
  }

  if (isSuccessfullSubmit) {
    return <Navigate to={"/" + apiUrl} />
  }

  return (
    <>
      {!initialValues && <Loading />}
      {initialValues && (
        <ArticleForm
          onSubmit={handleSubmit}
          errors={(updateArticlError && updateArticlError.errors) || {}}
          initialValues={initialValues}
        />
      )}
    </>
  )
}

export default EditArticle